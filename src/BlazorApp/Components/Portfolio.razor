<section class="dark" id="portfolio">
    <div class="w3-container">
        <div class="w3-row">
            <h2 class="w3-left w3-margin-bottom">Portfolio</h2>
            @if (projects is null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <div class="w3-container">
                    @{
                        int count = 0;

                        foreach (var project in projects)
                        {
                            <a href="@project.Url">
                                <h2>@project.Title</h2>
                            </a>

                            <button onclick="myFunction('Demo @count')" class="w3-button w3-block w3-left-align">Description</button>
                            <div id="Demo @count" class="w3-hide w3-container">
                                <p class="small">@project.Description</p>
                            </div>


                            count++;

                        }
                    }
                </div>
            }
        </div>
    </div>

    <script>
        function myFunction(id) {
            console.log('porcodio' + id);
            var x = document.getElementById(id);
            if (x) {
                if (x.className.indexOf("w3-show") == -1) {
                    x.className += " w3-show";
                    x.previousElementSibling.className =
                        x.previousElementSibling.className.replace("w3-black", "w3-red");
                } else {
                    x.className = x.className.replace(" w3-show", "");
                    x.previousElementSibling.className =
                        x.previousElementSibling.className.replace("w3-red", "w3-black");
                }
            } else {
                console.error('Elemento non trovato: ' + id);
            }
        }

    </script>
</section>

@code {
    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    [Parameter, EditorRequired]
    public required HeroImageService HeroImageService { get; set; }

    private List<Project>? projects;
    private HeroImage? pgImage;

    protected override async Task OnInitializedAsync()
    {
        projects = await Http.GetFromJsonAsync<List<Project>>("sample-data/projects.json");
        pgImage = await HeroImageService.GetHeroAsync(img => img.Name == "sfondoPc");

    }
}
